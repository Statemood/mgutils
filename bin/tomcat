#! /bin/bash

# ------------------------------------------
#
# Created by Statemood, 2012.12.06 18:00
# Updated by Statemood, 2016.07.06 11:20
#            Statemood@gmail.com
#
# Project mgutils:
#    https://github.com/Statemood/mgutils
# ------------------------------------------

 VERSION=1.0.1

RUN_USER="www"
APP_NAME="$1"
ARGUMENT="$2"
APP_PATH=/data/www
BACKUPDR=/data/backup/web
ERRORMSG='${f141}Error${f00}'
APP_LOGS=$APP_PATH/$APP_NAME/logs/catalina.out
CBASEKEY='Dcatalina.base='

tty > /dev/null && tty=0 || tty=1

case $tty in
    0)
         f00='\033[0m'
         f01='\033[1m'
         f04='\033[4m'
         f32='\033[32m'
         f33="\033[33m"
         f34='\033[34m'
        f131='\033[1;31m'
        f132='\033[1;32m'
        f135='\033[1;35m'
        f141='\033[1;41m'
        f434='\033[4;34m'
        ;;
esac

log(){
    # log level(info|error|warning) msg
    case $1 in
        info)
            echo -e "${f01}`echo  $1 | tr -t a-z A-Z`${f00}: $2"
            ;;
        error)
            echo -e "${f141}`echo $1 | tr -t a-z A-Z`${f00}: $2"
            ;;
        warning)
            echo -e "${f132}`echo $1 | tr -t a-z A-Z`${f00}: $2"
            ;;
    esac
}

help_msg(){
    echo -e "${f01}Apache Tomcat admin tool${f00}

    Version: $VERSION
    $(basename $0) appname [arguments]

        ${f32}list${f00}    [all|name]  List tomcat apps in $APP_PATH
                                all     List all
                                name    List name if exist

        ${f32}log${f00}     <number>    Display catalina.out (like tail -f catalina.out if no numbers given)

        ${f32}backup${f00}              Backs up the specified single or all webapps dir
                                eg.: $(basename $0) web1 backup      Backup 'web1/webapps'
                                     $(basename $0) all  backup      Backup all apps's webapps in $APP_PATH

        ${f32}start${f00}               Start appname Tomcat if it is not running

        ${f32}stop${f00}                Stop  appname Tomcat if it is running

        ${f32}restart${f00}             Restart specified Tomcat(stop && start)

        ${f32}status${f00}              Display singel or all Tomcat status, version, PIDs, etc.

        See ${f434}https://github.com/Statemood/mgutils${f00} get more information.
    "
}

if [ -z "$1" ]
then
    help_msg
    exit 1
fi

listall(){
    for a in $APP_PATH/*
    do
        f=$a/bin/catalina.sh
        test -d $a || continue
        test -f $f || continue

        echo -e "$(basename $a)"
    done
}

case "$1" in
    list)
        if [ "$2" = "all" ]
        then
            listall
            exit 0
        else
            if [ -d "$APP_PATH/$2" ] && [ -f "$APP_PATH/$2/bin/catalina.sh" ]
            then
                echo -e "$2"
                exit 0
            fi
        fi
        ;;
esac


if [ $UID != 0 -a $USER != $RUN_USER ] && [ ! -z "$2" -a "$2" != "status" -a "$2" != "log" ]
then
    log error "Dear `whoami`, you don't have permission to access '${f04}$(basename $0) $@${f00}'"
    exit 1
fi

if [ "$1" != "all" -a "$2" != "backup" -a "$2" != "status" ] || [ "$2" = "backup" -a "$1" != "all" -a ! -d "$APP_PATH/$1" ]
then
    if [ ! -d "$APP_PATH/$APP_NAME" ]
    then
        log error "$APP_NAME does not exist"
        exit 1
    fi
    if [ ! -x "$APP_PATH/$APP_NAME/bin/startup.sh" ]
    then
        log error "$APP_NAME not executable"
        exit 1
    fi
fi

GetPid(){
    APP_PIDS=`ps aux | grep "$1" | egrep -v "grep $1" | grep "$APP_PATH" | awk '$1 == "'$RUN_USER'"' | awk '{print $2}'`
}

GetPort(){
    RUN_PORT=`sed -n '/<!--/,/-->/!p' $APP_PATH/$APP_NAME/conf/server.xml | grep 'Connector port=' | awk -F '"' '{print $2}'`
}

if [ -z "$2" ]
then
    GetPid "$APP_NAME"
    GetPort
    echo -e "${f01}Apache Tomcat Information: ${f134}$APP_NAME${f00}"
    python -c "print '-' * 50"
    if [ -z "$APP_PIDS" ]
    then
        printf "PID:  ${f131}%-18s${f00}" "Not Running"
    else
        printf "PID:  ${f132}%-18s${f00}" "$APP_PIDS"
    fi
    printf "Port: ${f135}%-16s${f00}\n" "$RUN_PORT"
    $APP_PATH/$APP_NAME/bin/version.sh
    exit 0
fi

sucmd(){
    su - "$1" -c "$2"
}

Catalinaout(){
    if [ ! -f "$APP_LOGS" ]
    then
        log error "'$APP_LOGS': File not found"
        exit 1
    fi
    Tailines="$1"
    if [ -z "$Tailines" ]
    then
        tail -f $APP_LOGS
    else
        tail -$Tailines $APP_LOGS
    fi
}
start(){
    GetPid $APP_NAME
    printf "Tomcat starting ${f01}%-16s${f00}" "$APP_NAME"
    if [ ! -z "$APP_PIDS" ]
    then
        log error "$APP_NAME already running with PID $APP_PIDS"
        exit 1
    fi
    sucmd "$RUN_USER" "cd $APP_PATH/$APP_NAME/bin;./startup.sh > /dev/null 2>&1"
    GetPid $APP_NAME
    if [ -z "$APP_PIDS" ]
    then
        printf "${f131}%16s${f00}\n" "failed"
    else
        printf ": PID %-8s${f133}%16s${f00}\n" "$APP_PIDS" "done"
    fi
}

stop(){
    GetPid $APP_NAME
    printf "Tomcat stopping ${f01}%-16s${f00}" "$APP_NAME"
    KILLEDPID=$APP_PIDS
    GetPid $APP_NAME
    if [ -z "$APP_PIDS" -a "$ARGUMENT" != "restart" ]
    then
        log error "$APP_NAME not running"
        exit 1
    else
        if [ -z "$APP_PIDS" ]
        then
            NOT_RUN=1
        fi
    fi
    sucmd "$RUN_USER" "$APP_PATH/$APP_NAME/bin/shutdown.sh > /dev/null 2>&1"
    sleep 3
    GetPid $APP_NAME
    if [ ! -z "$APP_PIDS" ]
    then
        kill -9 "$APP_PIDS"
    fi
    GetPid $APP_NAME
    if [ -z "$APP_PIDS" ]
    then
        if [ "$NOT_RUN" = 1 ]
        then
            printf ": Not running\n"
        else
            printf ": PID %-8s${f133}%16s${f00}\n" "$KILLEDPID" "done"
        fi
    else
        echo -e "${f131}failed${f00}"
    fi
}

status(){
    GetPid  $APP_NAME
    GetPort
    VER_NAME="`$APP_PATH/$APP_NAME/bin/version.sh | grep 'Server version: ' | awk -F ': ' '{print $2}'`"
    printf "$VER_NAME ${f134}%-16s${f00}" "$APP_NAME"
    if [ -z "$APP_PIDS" ]
    then
        printf "${f131}Stopped${f00}"
    else
        printf "${f132}Running${f00}"
    fi
    printf " PID: %-7sPort: %-7s\n" "$APP_PIDS" "$RUN_PORT"
}

ListRunning(){
    ps aux | egrep "$RUN_USER|$APP_PATH|$CBASEKEY" | grep "$CBASEKEY" | awk -F "$CBASEKEY" '{print $2}' | \
             awk '{print $1}' | grep -v '{print' | sort | uniq | sed '/^$/d'
}

backup(){
        WEBBASE=""
        SERVXML=$APP_PATH/$APP_NAME/conf/server.xml
        APPBASE=`sed -n '/<!--/,/-->/!p' $SERVXML | grep 'appBase'  | awk -F 'appBase=' '{print $2}' | awk -F '"' '{print $2}'`
        DOCBASE=`sed -n '/<!--/,/-->/!p' $SERVXML | grep 'docBase=' | awk -F 'docBase=' '{print $2}' | awk -F '"' '{print $2}'`
    Backup_Time=`date +%F_%H.%M.%S`
    Backup_Save=$BACKUPDR/$APP_NAME/`date +%F`
    Backup_Name=$Backup_Save/${APP_NAME}_${Backup_Time}.tgz
    Backup_15dg=$(dirname $Backup_Save)/`date -d '15 days ago' +%F`

    for DocList in $DOCBASE
    do
        if [ ! -z "$DocList" -a "`du -sb $DocList | awk '{print $1}'`" -gt "4096" ]
        then
            WEBBASE="${WEBBASE} ${DocList}"
        fi

        if [ ! -z "$APPBASE" -a $APPBASE = webapps -a "`du -sb $APP_PATH/$APP_NAME/webapps | awk '{print $1}'`" -gt "4096" ]
        then
            WEBBASE="${WEBBASE} $APP_PATH/$APP_NAME/$APPBASE"
        fi

        if [ ! -d "$Backup_Save" ]
        then
            mkdir -p $Backup_Save
        fi
        printf "Backup ${f135}%-16s${f00} " "$APP_NAME"
        if [ -d "$APP_PATH/$APP_NAME/webapps" ]
        then
            tar zcfP $Backup_Name $WEBBASE
            if [ -f "$Backup_Name" ]
            then
                echo -e "${f132}done${f00}"
            else
                echo -e "${f131}failed${f00}"
            fi
        else
            log error "$APP_PATH/$APP_NAME/webapps: Not found"
            exit 1
        fi
        if [ -d "$Backup_15dg" ]
        then
            rm -rf $Backup_15dg
        fi
    done
}

case "$2" in
    log)
        Catalinaout "$3";;
    stop)
        stop;;
    start)
        start;;
    status)
        if [ "$1" = "all" ]
        then
            for app in `ListRunning`
            do
                APP_NAME="$(basename $app)"
                GetPid $APP_NAME
                status
            done
        else
            status
        fi
        ;;
    backup)
        if [ "$1" = "all" ]
        then
            for app in `ListRunning`
            do
                APP_NAME="$(basename $app)"
                backup
            done
        else
            backup
        fi
        ;;
    restart)
        stop
        start
        ;;
    *)
        help_msg;;
esac
