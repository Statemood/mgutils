#! /bin/bash

# ------------------------------------------
#
# Created by Statemood, 2012.12.06 18:00
# Updated by Statemood, 2012.12.27 12:50
#            Statemood@gmail.com
#
# Project mgutils:
#    https://github.com/Statemood/mgutils
# ------------------------------------------

RUN_USER="tomcat"
APP_NAME="$1"
ARGUMENT="$2"
APP_PATH=/data/www
BACKUPDR=/data/backup/web
ERRORMSG='\033[1;41mError\033[0m'
APP_LOGS=$APP_PATH/$APP_NAME/logs/catalina.out
CBASEKEY='Dcatalina.base='

help_msg(){
    echo -e "\033[1mApache Tomcat manager tool\033[0m
        
    $(basename $0) appname [arguments]
                
        \033[32mlog\033[0m     <number>    Display catalina.out (like tail -f catalina.out if no numbers given)
        \033[32mbackup\033[0m              Backs up the specified single or all webapps dir
                                eg.: $(basename $0) web1 backup      Backup 'web1/webapps'
                                     $(basename $0) all  backup      Backup all apps's webapps in $APP_PATH
        \033[32mstart\033[0m               Start appname Tomcat if it is not running
        \033[32mstop\033[0m                Stop  appname Tomcat if it is running
        \033[32mrestart\033[0m             Restart specified Tomcat(stop, start)
        \033[32mstatus\033[0m              Display singel or all Tomcat status, version, PIDs, etc.

See \033[4;34mhttps://github.com/Statemood/mgutils\033[0m get more information.       
    "
}
if [ -z "$1" ]
then
    help_msg
    exit 1
fi

if [ $UID != 0 -a $USER != $RUN_USER ] && [ ! -z "$2" -a "$2" != "status" -a "$2" != "log" ]
then
    echo -e "$ERRORMSG: Dear `whoami`, you don't have permission to access '\033[4m$(basename $0) $@\033[0m'"
    exit 1
fi
if [ "$1" != "all" ] && [ "$2" != "backup" -a "$2" != "status" ]
then
    if [ ! -d "$APP_PATH/$APP_NAME" ] 
    then
        echo -e "$ERRORMSG: $APP_NAME does not exist"
        exit 1
    fi
    if [ ! -x "$APP_PATH/$APP_NAME/bin/startup.sh" ] 
    then
        echo -e "$ERRORMSG: $APP_NAME not executable"
        exit 1
    fi
fi

GetPid(){
    APP_PIDS=`ps aux | grep "$1" | egrep -v "grep $1|$0" | grep "$APP_PATH" | awk '$1 == "'$RUN_USER'"' | awk '{print $2}'`
}

GetPort(){
    RUN_PORT=`sed -n '/<!--/,/-->/!p' $APP_PATH/$APP_NAME/conf/server.xml | grep 'Connector port=' | awk -F '"' '{print $2}'`
}

if [ -z "$2" ]
then
    GetPid "$APP_NAME"
    GetPort
    echo -e "\033[1mApache Tomcat Information: \033[1;34m$APP_NAME\033[0m"
    python -c "print '-' * 50"
    if [ -z "$APP_PIDS" ]
    then
        printf "PID:  \033[1;31m%-18s\033[0m" "Not Running"
    else 
        printf "PID:  \033[1;32m%-18s\033[0m" "$APP_PIDS" 
    fi
    printf "Port: \033[1;35m%-16s\033[0m\n" "$RUN_PORT"
    $APP_PATH/$APP_NAME/bin/version.sh 
    exit 0
fi

sucmd(){
    su - "$1" -c "$2"
}

Catalinaout(){
    if [ ! -f "$APP_LOGS" ]
    then
        echo -e "$ERRORMSG: '$APP_LOGS': File not found"
        exit 1
    fi
    Tailines="$1"
    if [ -z "$Tailines" ]
    then
        tail -f $APP_LOGS
    else
        tail -$Tailines $APP_LOGS
    fi
}
start(){
    GetPid $APP_NAME
    printf "Tomcat starting \033[1m%-16s\033[0m" "$APP_NAME"
    if [ ! -z "$APP_PIDS" ]
    then
        echo -e "$ERRORMSG: $APP_NAME already running with PID $APP_PIDS"
        exit 1
    fi
    sucmd "$RUN_USER" "cd $APP_PATH/$APP_NAME/bin;./startup.sh > /dev/null 2>&1"
    GetPid $APP_NAME
    if [ -z "$APP_PIDS" ]
    then
        printf "\033[1;31m%16s\033[0m\n" "failed" 
    else
        printf ": PID %-8s\033[1;33m%16s\033[0m\n" "$APP_PIDS" "done" 
    fi
}

stop(){
    GetPid $APP_NAME
    printf "Tomcat stopping \033[1m%-16s\033[0m" "$APP_NAME"
    KILLEDPID=$APP_PIDS
    GetPid $APP_NAME
    if [ -z "$APP_PIDS" -a "$ARGUMENT" != "restart" ]
    then
        echo -e "$ERRORMSG: $APP_NAME not running"
        exit 1
    else
        if [ -z "$APP_PIDS" ]
        then
            NOT_RUN=1
        fi
    fi
    sucmd "$RUN_USER" "$APP_PATH/$APP_NAME/bin/shutdown.sh > /dev/null 2>&1"
    sleep 3
    GetPid $APP_NAME
    if [ ! -z "$APP_PIDS" ]
    then
        kill -9 "$APP_PIDS"
    fi
    GetPid $APP_NAME
    if [ -z "$APP_PIDS" ]
    then
        if [ "$NOT_RUN" = 1 ]
        then
            printf ": Not running\n"
        else
            printf ": PID %-8s\033[1;33m%16s\033[0m\n" "$KILLEDPID" "done"
        fi
    else
        echo -e "\033[1;31mfailed\033[0m"
    fi
}

status(){
    GetPid  $APP_NAME
    GetPort 
    VER_NAME="`$APP_PATH/$APP_NAME/bin/version.sh | grep 'Server version: ' | awk -F ': ' '{print $2}'`"
    printf "$VER_NAME \033[1;34m%-16s\033[0m" "$APP_NAME"
    if [ -z "$APP_PIDS" ]
    then
        printf "\033[1;31mStopped\033[0m"
    else
        printf "\033[1;32mRunning\033[0m"
    fi
    printf " PID: %-7sPort: %-7s\n" "$APP_PIDS" "$RUN_PORT"
}
ListRunning(){
    ps aux | egrep "$RUN_USER|$APP_PATH|$CBASEKEY" | grep "$CBASEKEY" | awk -F "$CBASEKEY" '{print $2}' | \
             awk '{print $1}' | grep -v '{print' | sort | uniq | sed '/^$/d'
}
backup(){
        WEBBASE=""
        SERVXML=$APP_PATH/$APP_NAME/conf/server.xml
        APPBASE=`sed -n '/<!--/,/-->/!p' $SERVXML | grep 'appBase'  | awk -F 'appBase=' '{print $2}' | awk -F '"' '{print $2}'`
        DOCBASE=`sed -n '/<!--/,/-->/!p' $SERVXML | grep 'docBase=' | awk -F 'docBase=' '{print $2}' | awk -F '"' '{print $2}'`
    Backup_Time=`date +%F_%H.%M.%S`
    Backup_Save=$BACKUPDR/$APP_NAME/`date +%F`
    Backup_Name=$Backup_Save/${APP_NAME}_${Backup_Time}.tgz
    Backup_15dg=$(dirname $Backup_Save)/`date -d '15 days ago' +%F`
    
    if [ ! -z "$DOCBASE" -a "`du -sb $DOCBASE | awk '{print $1}'`" -gt "4096" ]
    then
        WEBBASE="${WEBBASE} ${DOCBASE}"
    fi
    
    if [ ! -z "$APPBASE" -a $APPBASE = webapps -a "`du -sb $APP_PATH/$APP_NAME/webapps | awk '{print $1}'`" -gt "4096" ]
    then
        WEBBASE="${WEBBASE} $APP_PATH/$APP_NAME/$APPBASE"
    fi 

    if [ ! -d "$Backup_Save" ]
    then
        mkdir -p $Backup_Save
    fi
    if [ -d "$APP_PATH/$APP_NAME/webapps" ]
    then
        printf "Backup \033[1;35m%-16s\033[0m " "$APP_NAME"
        tar zcfP $Backup_Name $WEBBASE
        if [ -f "$Backup_Name" ]
        then
            Backup_Size=`du -h $Backup_Name | awk '{print $1}'`
            echo -e "\033[1;32mdone\033[0m $BACKUPDR/\033[1;35m$APP_NAME\033[0m/`date +%F`/${APP_NAME}_${Backup_Time}.tgz saved(\033[1m$Backup_Size\033[0m)"
        fi
    else
        echo -e "$ERRORMSG: $APP_PATH/$APP_NAME/webapps: Not found"
        exit 1
    fi
    if [ -d "$Backup_15dg" ]
    then
        rm -rf $Backup_15dg
    fi
}

case "$2" in
    log)
        Catalinaout "$3";;
    stop)
        stop;;
    start)
        start;;
    status)
        if [ "$1" = "all" ]
        then
            for Web in `ListRunning`
            do
                APP_NAME="$(basename $Web)" 
                GetPid $APP_NAME
                status
            done
        else
            status
        fi
        ;;
    backup)
        if [ "$1" = "all" ]
        then
            for Web in `ListRunning`
            do
                APP_NAME="$(basename $Web)" 
                backup
            done
        else
            backup
        fi
        ;;
    restart)
        stop
        start
        ;;
    *)
        help_msg;;
esac
